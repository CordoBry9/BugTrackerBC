@using BugTrackerBC.Client.Components.UI.ProjectsUI
@using BugTrackerBC.Client.Models
@using BugTrackerBC.Client.Services.Interfaces
@inject IProjectDTOService ProjectService
@inject NavigationManager Nav

@if (Project != null)
{
    <AuthorizeView>

        <tr>
            <td>@Project.Created.ToString("d")</td>
            <td><a href="/details-project/@Project.Id" class="text-decoration-none">@Project.Name</a></td>
            <td>@Project.Priority</td>
@*             <td>@Project.StartDate.ToString("d")</td>
            <td>@Project.EndDate.ToString("d")</td> *@
            @if (Project.Archived == false)
            {
                
                @if (context.User.IsInRole(nameof(Roles.Admin)) || projectManager != null && context.User.IsInRole(nameof(Roles.ProjectManager)) && projectManager.Id == userInfo!.UserId)
                {
                    <td class="p-2" style="width: 4rem;">
                        <div class="vstack">
                            <button class="btn btn-outline-info p-2" @onclick="HandleArchive"><i class='bx bx-archive'></i></button>
                           @*  <a class="btn btn-info" href="/edit-project/@Project.Id"><i class="bi bi-pencil"></i> Edit</a> *@
                        </div>
                    </td>
                }
                else
                {
                    <td>

                    </td>
                }
            }
        </tr>
    </AuthorizeView>
}

@code {
    [Parameter]
    public ProjectDTO? Project { get; set; }

    [Parameter]
    public UserInfo? userInfo { get; set; }

    [Parameter]
    public EventCallback<int> OnRestore { get; set; }

    [Parameter]
    public EventCallback<int> OnArchive { get; set; }

    private UserDTO? projectManager;

    protected override async Task OnParametersSetAsync()
    {
        if (Project != null && userInfo != null)
        {
            projectManager = await ProjectService.GetProjectManagerAsync(Project.Id, userInfo.CompanyId);
        }

    }

    private async Task HandleArchive()
    {
        if (Project != null)
        {
            await OnArchive.InvokeAsync(Project.Id);
            StateHasChanged();
        }
    }


}
