@using BugTrackerBC.Client.Components.UI.ProjectsUI
@using BugTrackerBC.Client.Models
@using BugTrackerBC.Client.Services.Interfaces
@inject ITicketDTOService TicketDTOService
@inject NavigationManager Nav

@if (Ticket != null && userInfo != null)
{
    <AuthorizeView>
        <tr>
            <td>@Ticket.Created.ToString("d")</td>
            <td><a href="/details-Ticket/@Ticket.Id" class="text-decoration-none">@Ticket.Title</a></td>
            <td>@Ticket.Priority.GetDisplayName()</td>
            <td>@Ticket.Status.GetDisplayName()</td>
            <td>@Ticket.Type.GetDisplayName()</td>
            <td>
                <div class="vstack">
                    @if (context.User.IsInRole(nameof(Roles.Admin)) || (context.User.IsInRole(nameof(Roles.ProjectManager)) && Projects!.Any(p => p.Id == Ticket.ProjectId && p.Members.Any(m => m.Id == userInfo.UserId))) || Ticket.SubmitterUserId == userInfo.UserId)
                    {
                        @if (!Ticket.Archived)
                        {
                            <button class="btn btn-outline-danger mb-2" @onclick="HandleArchive"><i class='bx bx-archive'></i></button>
                        }
                        else
                        {
                            <button class="btn btn-outline-success mb-2 p-1" @onclick="HandleRestore"><i class="bi bi-check"></i></button>
                        }
                    }
                </div>
            </td>
        </tr>
    </AuthorizeView>
}

@code {
    [Parameter]
    public TicketDTO? Ticket { get; set; }

    [Parameter]
    public UserInfo? userInfo { get; set; }

    [Parameter]
    public List<ProjectDTO>? Projects { get; set; }

    [Parameter]
    public EventCallback<int> OnRestore { get; set; }

    [Parameter]
    public EventCallback<int> OnArchive { get; set; }

    private async Task HandleArchive()
    {
        if (Ticket != null)
        {
            await OnArchive.InvokeAsync(Ticket.Id);
            StateHasChanged();
        }
    }

    private async Task HandleRestore()
    {
        if (Ticket != null)
        {
            await OnRestore.InvokeAsync(Ticket.Id);
            StateHasChanged();
        }
    }
}
