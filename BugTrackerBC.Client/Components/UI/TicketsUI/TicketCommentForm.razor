@using BugTrackerBC.Client.Services.Interfaces
@inject ITicketDTOService TicketDTOService

<EditForm Model="Comment" OnValidSubmit="HandleSubmit" class="row">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="col-12">
        <div class="mb-2 input-group">
            <span class="input-group-text">
                <i class="bx bx-message fs-lg"></i>
            </span>
            <InputTextArea @bind-Value="Comment!.Content" class="form-control" placeholder="Type your message here..." rows="6"></InputTextArea>
            <ValidationMessage For="() => Comment!.Content"></ValidationMessage>
        </div>
        <div class="col-12 text-end mt-2">
            <button type="submit" class="btn btn-primary">Save</button>
        </div>
    </div>
    <ValidationSummary></ValidationSummary>
</EditForm>

@code {

    [Parameter]

    public TicketCommentDTO? Comment { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }

    [Parameter]

    public List<TicketCommentDTO>? commentsList { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<TicketCommentDTO> CreateTheComment { get; set; }

    private IEnumerable<TicketCommentDTO> ticketComments = [];
    private TicketCommentDTO newComment = new TicketCommentDTO();
    private string? imageError;
    private string? fileError;
    private UserInfo? userInfo;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            
            await CreateTheComment.InvokeAsync(Comment);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }


}
