@page "/company"
@using BugTrackerBC.Client.Models
@using BugTrackerBC.Client.Services.Interfaces
@inject ICompanyDTOService CompanyDTOService
@inject NavigationManager Nav
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@rendermode InteractiveServer

<PageTitle>Company | Info </PageTitle>

@if (company != null)
{
    <div class="row d-flex">
        <div class="col-md-6 mt-2">
            <div class="card mb-4">
                <div class="row">
                    <div class="col col-md-6">
                        <img src="@company.ImageUrl" class="img-fluid h-100 w-100 img-rounded-left" alt="company logo">
                    </div>
                    <div class="col-md-6 card-body d-flex">
                        <div class="vstack p-1">
                            <h5 class="card-title">@company.Name</h5>
                            <p class="card-text">@company.Description</p>
                            <hr />
                            <AuthorizeView Roles="Admin">
                                <div class="mt-3"><a href="/company-edit/@company.Id" class="btn btn-primary">Edit Company</a></div>
                            </AuthorizeView>
                        </div>
                    </div>
                </div>
            </div>
            <ul class="list-group mb-5">
                <strong class="fs-4 mb-3"><u>Employees</u></strong>
                @if (companymembers != null)
                {
                    @foreach (UserDTO member in companymembers)
                    {
                        @if (member.Id != userInfo!.UserId)
                        {
                            <li class="list-group-item list-group-item-action" @onclick="() => SelectMember(member)">
                                Name: @member.FullName
                                <br />
                                Role: @member.Role
                            </li>
                        }
                    }
                }
            </ul>
        </div>
        <div class="col-md-6 p-2 mb-3">
            @if (selectedMember != null)
            {
                <div class="card">
                    <h5 class="card-header lead fs-2"><b>Edit Member</b></h5>
                    <div class="card-body">
                        <EditForm Model="selectedMember" OnValidSubmit="HandleUpdate">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div class="mb-3">
                                <label for="fullName" class="form-label lead">Name:</label>
                                <p id="fullName">@selectedMember.FullName</p>
                            </div>
                            <div class="mb-3">
                                <label for="role" class="form-label lead">Role</label>
                                <InputSelect id="role" class="form-control" @bind-Value="selectedMember.Role">
                                    @foreach (Roles role in Enum.GetValues(typeof(Roles)))
                                    {
                                        @if (role != Roles.DemoUser)
                                        {
                                            <option value="@role">@role.GetDisplayName()</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                            <button type="submit" class="btn btn-primary">Update Role</button>
                        </EditForm>
                    </div>
                </div>
            }
            else
            {
                <div class="card">
                    <h5 class="card-header lead fs-2"><b>Edit Member</b></h5>
                    <div class="card-title">
                            <div class="mb-3 p-3">
                                <div class="lead fs-3">Select an Employee</div>
                            </div>

                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    private CompanyDTO? company;
    private IEnumerable<UserDTO>? companymembers;
    private UserDTO? selectedMember;
    private UserInfo? userInfo;

    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
        company = await CompanyDTOService.GetCompanyByIdAsync(userInfo!.CompanyId);
        companymembers = await CompanyDTOService.GetCompanyMembersAsync(userInfo.CompanyId);
    }

    private void SelectMember(UserDTO member)
    {
        selectedMember = member;
    }

    private async Task HandleUpdate()
    {
        if (userInfo != null && selectedMember != null)
        {
            await CompanyDTOService.UpdateUserRoleAsync(selectedMember, userInfo.UserId);
            companymembers = await CompanyDTOService.GetCompanyMembersAsync(userInfo.CompanyId);
        }
    }
}
