@page "/company"
@using BugTrackerBC.Client.Components.UI
@using BugTrackerBC.Client.Helpers
@using BugTrackerBC.Client.Models
@using BugTrackerBC.Client.Services.Interfaces
@inject ICompanyDTOService CompanyDTOService
@inject NavigationManager Nav
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@rendermode InteractiveAuto
@attribute [Authorize]

<PageTitle>Company | Info </PageTitle>
 @*
     TODO:
 Add error for authorizations
 add loading spinners
 *@

<div class="container-fluid bg-gradient">
    @if (userInfo != null && company != null)
    {


        <AuthorizeView Context="authContext">
            <Authorized>
                <!-- Portfolio list view -->
                <div class="row">
                    <div class="col-md-6 pb-1 mb-3 pb-md-0 mb-md-0">
                        <a href="#">
                            <img src="@company.ImageUrl" class="rounded-3" width="600" alt="Company Logo">
                        </a>
                    </div>
                    <div class="col-md-6">
                        <div class="ps-md-4 ms-md-2 p-3">
                            <h2 class="h3">@company.Name</h2>
                            <a class="d-table badge bg-faded-primary text-primary fs-sm mb-3">Technology Company</a>
                            <p class="d-md-none d-lg-block pb-3 mb-2 mb-md-2">
                                @company.Description
                               
                            </p>
                            @if (authContext.User.IsInRole(nameof(Roles.Admin)))
                            {
                                <a class="btn btn-outline-primary" href="company-edit/@company.Id"><i class="bx bx-pencil"></i></a>
                            }
                        </div>
                    </div>
                </div>

                <div class="row d-flex py-3">
                    <div class="col-md-6 mt-2 d-flex">
                        <!-- Other content can go here or additional company details -->
                    </div>
                    <div class="col-md-6 p-2 mb-3 d-flex">
                        <!-- Leave this column for future expansion or content -->
                    </div>
                </div>

                <div class="container-xxl">
                    <!-- List of members -->
                    <div class="lead mb-3 text-center"><u>Members:</u></div>
                    <!-- You -->
                    <div class="d-flex justify-content-center mb-3">
                        <div class="col col-md-4 col-sm-6">
                            <div class="card border border-1 card-hover card-body text-center h-100">
                                <img src="@userInfo.ProfilePictureUrl" class="d-block rounded-circle mx-auto mb-3" width="162" alt="employee image">
                                <h5 class="fw-medium fs-lg mb-1">@userInfo.FullName</h5>
                                <p class="fs-sm mb-3">
                                    @if (currentUser != null)
                                    {
                                        @foreach (Roles role in Enum.GetValues(typeof(Roles)))
                                        {
                                            if (currentUser.Role == role.ToString())
                                            {
                                            <p class="text-center">@role.GetDisplayName()</p>
                                            }
                                        }
                                    }
                                </p>
                            </div>
                        </div>
                    </div>
                    <!-- others-->
                    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3">
                        @if (companymembers != null)
                        {
                            @foreach (UserDTO member in companymembers)
                            {
                                @if (member.Id != userInfo!.UserId)
                                {
                                    <div class="col">
                                        <div class="card card-body card-hover border border-1 text-center h-100">
                                            <img src="@member.ImageUrl" class="d-block rounded-circle mx-auto mb-3" width="162" alt="employee image">
                                            <h5 class="fw-medium fs-lg mb-1">@member.FullName</h5>
                                            <p class="fs-sm mb-3">
                                                <EditForm Model="member" OnValidSubmit="HandleUpdate">
                                                    <DataAnnotationsValidator />
                                                    <ValidationSummary />
                                                    @if (authContext.User.IsInRole(nameof(Roles.Admin)))
                                                    {
                                                        <InputSelect id="role" class="form-control text-center" @bind-Value="member.Role">
                                                            @foreach (Roles role in Enum.GetValues(typeof(Roles)))
                                                            {
                                                                @if (role != Roles.DemoUser)
                                                                {
                                                                    <option value="@role">@role.GetDisplayName()</option>
                                                                }
                                                            }
                                                        </InputSelect>
                                                    }
                                                    else
                                                    {
                                                        @foreach (Roles role in Enum.GetValues(typeof(Roles)))
                                                        {
                                                            if (member.Role == role.ToString())
                                                            {
                                                                <p class="text-center">@role.GetDisplayName()</p>
                                                            }
                                                        }
                                                    }
                                                    <div class="text-center">
                                                        @if (authContext.User.IsInRole(nameof(Roles.Admin)))
                                                        {
                                                            <button type="submit" class="btn btn-primary mt-3">Update Role</button>
                                                        }
                                                    </div>
                                                </EditForm>
                                            </p>
                                        </div>
                                    </div>
                                }
                            }
                        }
                    </div>
                </div>


            </Authorized>
            <NotAuthorized>
                <Message DisplayMessage="@authErrorMsg" Title="@authErrorTitle"></Message>
            </NotAuthorized>
        </AuthorizeView>
        @*     Fix this later to just have certain columns show when not an admin (like the turnary statement you made earlier) *@
    }
    else
    {
        <h3> Loading...</h3>
    }
</div>
@code {

    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }

    private CompanyDTO? company;
    private IEnumerable<UserDTO>? companymembers;
    private UserDTO? selectedMember;
    private UserInfo? userInfo;
    private string? imageError;
    public string authErrorMsg = "User not authorized to access this page";
    public string authErrorTitle = "Authorization Error";
    public string authErrorCSS = "alert-primary";
    private UserDTO? currentUser;


    protected override async Task OnInitializedAsync()
    {
        userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
        if (userInfo != null)
        {
            company = await CompanyDTOService.GetCompanyByIdAsync(userInfo.CompanyId);
            companymembers = await CompanyDTOService.GetCompanyMembersAsync(userInfo.CompanyId);
            currentUser = companymembers.FirstOrDefault(m => m.Id == userInfo.UserId);
        }
        else
        {

        }

    }

    private void SelectMember(UserDTO member)
    {
        selectedMember = member;
    }

    private async Task HandleUpdate()
    {
        if (userInfo != null && selectedMember != null)
        {
            await CompanyDTOService.UpdateUserRoleAsync(selectedMember, userInfo.UserId);
            companymembers = await CompanyDTOService.GetCompanyMembersAsync(userInfo.CompanyId);
        }
    }


    private async Task OnFileChange(InputFileChangeEventArgs changeEvent)
    {
        if (changeEvent.File is null)
        {
            selectedMember!.ImageUrl = FileHelper.DefaultProfilePicture;
        }
        else if (changeEvent.File.Size > FileHelper.MaxFileSize)
        {
            imageError = "Images must be less than 5MB";
        }
        else
        {
            try
            {
                selectedMember!.ImageUrl = await FileHelper.GetDataUrl(changeEvent.File);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
                imageError = "Could not read the selected file. Please select a different image.";
            }
        }
    }
}
