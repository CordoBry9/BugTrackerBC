@page "/edit-ticket/{ticketId:int}"
@using BugTrackerBC.Client.Services.Interfaces
@using Microsoft.AspNetCore.Authorization
@inject IProjectDTOService ProjectDTOService
@inject ITicketDTOService TicketDTOService
@inject NavigationManager Navigation
@attribute [Authorize]
@rendermode InteractiveAuto

<PageTitle>Edit Project</PageTitle>

@if (ticket == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="card p-3">
    <div class="lead fs-1 mb-2">Edit:</div>
    <EditForm Model="ticket" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-floating mb-4">
            <InputText id="title" class="form-control" @bind-Value="ticket.Title" placeholder="Title" />
            <label for="title">Title</label>
        </div>

        <div class="form-floating mb-4">
            <InputTextArea id="description" class="form-control" @bind-Value="ticket.Description" style="height: 8rem;" placeholder="Description" />
            <label for="description">Description</label>
        </div>

        <div class="form-floating mb-4">
            <InputSelect id="priority" class="form-select" @bind-Value="ticket.Priority">
                @foreach (TicketPriority priority in Enum.GetValues(typeof(TicketPriority)))
                {
                    <option value="@priority">@priority.GetDisplayName()</option>
                }
            </InputSelect>
            <label for="priority">Priority</label>
        </div>

        <div class="form-floating mb-4">
            <InputSelect id="type" class="form-select" @bind-Value="ticket.Type">
                @foreach (TicketType type in Enum.GetValues(typeof(TicketType)))
                {
                    <option value="@type">@type.GetDisplayName()</option>
                }
            </InputSelect>
            <label for="type">Type</label>
        </div>

        <div class="form-floating mb-4">
            <InputSelect id="status" class="form-select" @bind-Value="ticket.Status">
                @foreach (TicketStatus status in Enum.GetValues(typeof(TicketStatus)))
                {
                    <option value="@status">@status.GetDisplayName()</option>
                }
            </InputSelect>
            <label for="status">Status</label>
        </div>

        <button type="submit" class="btn btn-outline-primary">Save</button>
    </EditForm>
    </div>
}

@code {
    [Parameter]
    public int ticketId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }


    private List<ProjectDTO> projects = new List<ProjectDTO>();
    private TicketDTO? ticket;
    private UserInfo? userInfo;
    private UserDTO? activeuser;
    protected override async Task OnInitializedAsync()
    {
        userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
        projects = (await ProjectDTOService.GetAllProjectsAsync(userInfo!.CompanyId)).ToList();
        ticket = await TicketDTOService.GetTicketByIdAsync(ticketId, userInfo!.CompanyId);
        // activeuser = await 
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (ticket != null)
            {
                await TicketDTOService.UpdateTicketAsync(ticket, userInfo!.CompanyId, userInfo!.UserId);
                foreach (Roles role in Enum.GetValues(typeof(Roles)))
                {
                    if (userInfo.Roles.Contains(nameof(Roles.Admin)))
                    {

                        Navigation.NavigateTo($"details-ticket/{ticket.Id}");
                    }
                    else
                    {
                        Navigation.NavigateTo($"details-ticket/{ticket.Id}");
                    }
                }
                
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }
}
