@page "/details-ticket/{ticketId:int}"
@using BugTrackerBC.Client.Components.UI
@using BugTrackerBC.Client.Components.UI.TicketsUI
@using BugTrackerBC.Client.Models
@using BugTrackerBC.Client.Services.Interfaces
@using Microsoft.AspNetCore.Authorization
@inject ITicketDTOService TicketDTOService
@inject IProjectDTOService ProjectDTOService
@inject ICompanyDTOService CompanyDTOService
@inject NavigationManager Nav
@rendermode InteractiveAuto
@attribute [Authorize]

@if (ticket != null && userInfo != null)
{
    <AuthorizeView>
        <Authorized>
            <div class="row g-4">
                <div class="@(context.User.IsInRole(nameof(Roles.Developer)) || context.User.IsInRole(nameof(Roles.Submitter)) ? "col-12" : "col-md-8")">
                    <div class="card mb-2 h-100">
                        <div class="card-header">
                            <h4>@ticket.Title</h4>
                        </div>
                        <div class="card-body d-flex flex-column">
                            <div class="row row-cols-md-2 row-cols-1 mb-3">
                                <div class="col">
                                    <p class="card-text"><b>Created:</b> @ticket.Created.ToString("d") </p>
                                    @if (ticket.Updated is not null)
                                    {
                                        <p class="card-text"> <b>Updated:</b> @ticket.Updated?.ToString("d")</p>
                                    }
                                    <p class="card-text"><b>Priority:</b> @ticket.Priority</p>
                                    <p class="card-text"><b>Status:</b> @ticket.Status</p>
                                    <p class="card-text mb-3"><b>Type:</b> @ticket.Type</p>
                                </div>
                                <div class="col">
                                    <p class="card-text"><b>Submitter:</b> @ticket.SubmitterUser?.FullName</p>
                                    @if (ticket.DeveloperUser is not null)
                                    {
                                        <p class="card-text"><b>Developer:</b> @ticket.DeveloperUser?.FullName</p>
                                    }
                                    else
                                    {
                                        <p class="card-text"><b>Developer:</b> Unassigned</p>
                                    }
                                    @if (project is not null)
                                    {
                                        <p class="card-text"><b>Project:</b> <a href="details-project/@project?.Id" class="text-decoration-none">@project?.Name</a></p>
                                    }
                                    <p class="card-text"><b>Archived?:</b> @(ticket.Archived == true ? "Archived" : "Active")</p>
                                </div>
                            </div>
                            <p class="card-text flex-grow-1"><b>Description:</b> @ticket.Description</p>
                            <hr  class="mb-3"/>
                            <div class="row d-flex justify-content-between align-items-end">
                                <div class="col-auto">
                                    <a href="@((userInfo.Roles.Contains(nameof(Roles.Admin))) ? "/tickets" : "/my-tickets")"
                                       class="btn btn-outline-primary">
                                        <i class='bx bx-arrow-from-right'></i>
                                    </a>
                                </div>
                                <div class="col-auto d-flex">
                                    @if (ticket.Archived == false)
                                    {
                                        @if (userInfo != null && (context.User.IsInRole(nameof(Roles.Admin)) ||
                                       (projectManager != null && context.User.IsInRole(nameof(Roles.ProjectManager)) && projectManager.Id == userInfo.UserId)))
                                        {
                                            <button class="btn btn-outline-danger me-2" @onclick="HandleArchive">
                                                <i class='bx bx-archive'></i>
                                            </button>
                                        }
                                        @if (userInfo != null && (context.User.IsInRole(nameof(Roles.Admin)) || ticket.SubmitterUserId == userInfo.UserId || ticket.DeveloperUserId == userInfo.UserId ||
                                       (projectManager != null && context.User.IsInRole(nameof(Roles.ProjectManager)) && projectManager.Id == userInfo.UserId)))
                                        {
                                            <a class="btn btn-outline-info" href="/edit-ticket/@ticket.Id">
                                                <i class='bx bxs-edit'></i>
                                            </a>
                                        }
                                    }
                                    @if (ticket.Archived == true)
                                    {
                                        <button class="btn btn-outline-success me-2" @onclick="HandleRestore">
                                            <i class='bx bx-check'></i>
                                        </button>
                                        @if ((context.User.IsInRole(nameof(Roles.Admin)))
                                       || (context.User.IsInRole(nameof(Roles.ProjectManager)) && project.Members.Any(m => m.Id == userInfo.UserId))
                                       || (context.User.IsInRole(nameof(Roles.Developer)) && ticket.DeveloperUserId == userInfo.UserId)
                                       || (context.User.IsInRole(nameof(Roles.Submitter)) && ticket.SubmitterUserId == userInfo.UserId))
                                        {
                                            <a class="btn btn-secondary" href="/edit-ticket/@ticketId"><i class='bx bxs-edit'></i></a>
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                    </div>

                </div>

                <div class="col-md-4">
                    <!-- Assign Members Card -->
                    @if ((context.User.IsInRole(nameof(Roles.Admin)))
                   || (context.User.IsInRole(nameof(Roles.ProjectManager)) && project.Members.Any(m => m.Id == userInfo.UserId)))
                    {
                        <AssignTicketMembers assignDeveloper="AssignDev"
                                             companyMembers="companyMembers" projectManager="projectManager"
                                             projectManagers="projectManagers"
                                             projectMembers="projectMembers"
                                             Ticket="ticket"
                                             userInfo="userInfo" />
                    }

                    <!-- Attachments Card -->
                    <div class="card border rounded p-3 mt-3">
                        <h4 class="text-center">Attachments:</h4>
                        @if ((context.User.IsInRole(nameof(Roles.Admin))) // Check for roles and project membership
                       || (context.User.IsInRole(nameof(Roles.ProjectManager)) && project.Members.Any(m => m.Id == userInfo.UserId))
                       || (context.User.IsInRole(nameof(Roles.Developer)) && (ticket.DeveloperUserId == userInfo.UserId || ticket.SubmitterUserId == userInfo.UserId))
                       || (context.User.IsInRole(nameof(Roles.Submitter)) && ticket.SubmitterUserId == userInfo.UserId))
                        {
                            <TicketAttachments TicketId="ticketId" OnChange="HandleChange"></TicketAttachments>
                        }
                        <button type="button" class="btn btn-outline-secondary mt-3" data-bs-toggle="modal" data-bs-target="#attachmentsModal">
                            Show Attachments
                        </button>
                    </div>
                </div>
            </div>

            <div class="row mb-4">
                <div class="col-12 mt-3 py-3">
                    @if ((context.User.IsInRole(nameof(Roles.Admin)))
                   || (context.User.IsInRole(nameof(Roles.ProjectManager)) && project.Members.Any(m => m.Id == userInfo.UserId))
                   || (context.User.IsInRole(nameof(Roles.Developer)) && (ticket.DeveloperUserId == userInfo.UserId || ticket.SubmitterUserId == userInfo.UserId))
                   || (context.User.IsInRole(nameof(Roles.Submitter)) && ticket.SubmitterUserId == userInfo.UserId))
                    {
                        <TicketCommentForm Comment="comment" CreateTheComment="HandleSubmit"></TicketCommentForm>
                    }
                </div>
                <div class="col-12">
                    <div>
                        <h4>Comments:</h4>
                        <div class="card-body">
                            @if (comments != null)
                            {
                                @foreach (TicketCommentDTO comment in comments.OrderByDescending(c => c.Created))
                                {
                                    <TicketComments Comment="comment" userInfo="userInfo" DeleteTheComment="HandleDelete" UpdateTheComment="HandleUpdate"></TicketComments>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        </Authorized>
        <NotAuthorized>
            <Message DisplayMessage="@authErrorMsg" Title="@authErrorTitle"></Message>
        </NotAuthorized>
    </AuthorizeView>
}

<!-- Modal for Attachments -->
<AuthorizeView>

    <div class="modal fade" id="attachmentsModal" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-dialog-scrollable" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Attachments</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="row g-4">
                        @if (ticket is not null)
                        {
                            @foreach (TicketAttachmentDTO ticketAttachment in ticket.Attachments)
                            {
                                string? extension = Path.GetExtension(ticketAttachment.FileName)?.Trim('.') ?? "default";
                                <div class="col-12">
                                    <div class="card h-100">
                                        <div class="card-header">
                                            <div class="card-title fs-4 mb-0">@ticketAttachment.FileName</div>
                                        </div>
                                        <div class="card-body">
                                            <p class="card-text"><b>Description:</b> @ticketAttachment.Description</p>
                                            <p class="card-text"><b>Upload Date:</b> @ticketAttachment.Created.ToString("d")</p>
                                            <div class="d-flex align-items-center justify-content-between">
                                                <a href="@ticketAttachment.AttachmentUrl" target="_blank" class="btn btn-primary textwrap">
                                                    <img src="@($"png/{extension}.png")" alt="@extension" style="width: 30px; height: 30px;" />
                                                </a>
                                                @if ((context.User.IsInRole(nameof(Roles.Admin)))
                                               || (context.User.IsInRole(nameof(Roles.ProjectManager)) && project.Members.Any(m => m.Id == userInfo.UserId))
                                               || (ticketAttachment.UserId == userInfo.UserId))
                                                {
                                                    <button class="btn btn-danger p-3" @onclick="() => DeleteAttachment(ticketAttachment.Id)">
                                                        <i class="bi bi-trash"></i>
                                                    </button>
                                                }
                                            </div>
                                        </div>
                                        @if (ticketAttachment.User is not null)
                                        {
                                            <div class="card-footer">
                                                <p class="card-text"><b>Uploaded by:</b> @ticketAttachment.User.FullName</p>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div>rea</div>
                        }

                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
</AuthorizeView>

@code {
    [Parameter]
    public int ticketId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }

    private IEnumerable<ProjectDTO>? projects;
    private ProjectDTO? project;
    private TicketDTO? ticket;
    private UserInfo? userInfo;
    private TicketCommentDTO comment = new TicketCommentDTO();
    private IEnumerable<TicketCommentDTO>? comments;
    private IEnumerable<UserDTO> projectManagers = [];
    private IEnumerable<UserDTO> companyMembers = [];
    private IEnumerable<UserDTO> projectMembers = [];
    private UserDTO? projectManager = new();
    private string authErrorMsg = "User not authorized to access this page";
    private string authErrorTitle = "Authorization Error";

    protected override async Task OnInitializedAsync()
    {
        userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
        comment = new TicketCommentDTO
            {
                UserId = userInfo?.UserId ?? string.Empty,
                TicketId = ticketId
            };
        ticket = await TicketDTOService.GetTicketByIdAsync(ticketId, userInfo.CompanyId);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (userInfo != null)
        {
            ticket = await TicketDTOService.GetTicketByIdAsync(ticketId, userInfo.CompanyId);
            if (ticket != null)
            {
                project = await ProjectDTOService.GetProjectByIdAsync(ticket.ProjectId, userInfo.CompanyId);
                comments = await TicketDTOService.GetTicketCommentsAsync(ticketId, userInfo.CompanyId);
                projectMembers = await ProjectDTOService.GetProjectMembersAsync(ticket.ProjectId, userInfo.CompanyId);

                if (project != null)
                {
                    projectManager = await ProjectDTOService.GetProjectManagerAsync(project.Id, userInfo.CompanyId);
                }
            }
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            await TicketDTOService.AddCommentAsync(comment, userInfo!.CompanyId);
            comments = await TicketDTOService.GetTicketCommentsAsync(ticketId, userInfo!.CompanyId);
            StateHasChanged();
            comment = new TicketCommentDTO
                {
                    UserId = userInfo?.UserId ?? string.Empty,
                    TicketId = ticketId
                };
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task HandleDelete(int commentId)
    {
        await TicketDTOService.DeleteCommentAsync(commentId, userInfo!.CompanyId);
        comments = await TicketDTOService.GetTicketCommentsAsync(ticketId, userInfo!.CompanyId);
    }

    private async Task AssignDev(TicketDTO ticketupdate)
    {
        if (ticketupdate != null && userInfo != null)
        {
            await TicketDTOService.UpdateTicketAsync(ticketupdate, userInfo.CompanyId, userInfo.UserId);
            ticket = await TicketDTOService.GetTicketByIdAsync(ticketId, userInfo.CompanyId);
            StateHasChanged();
        }
    }

    private async Task HandleUpdate(TicketCommentDTO comment)
    {
        try
        {
            await TicketDTOService.UpdateCommentAsync(comment, userInfo!.UserId);
            comments = await TicketDTOService.GetTicketCommentsAsync(ticketId, userInfo!.CompanyId);

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task HandleChange()
    {
        ticket = await TicketDTOService.GetTicketByIdAsync(ticketId, userInfo!.CompanyId);
    }

    private async Task DeleteAttachment(int attachmentId)
    {
        try
        {
            await TicketDTOService.DeleteTicketAttachment(attachmentId, userInfo!.CompanyId);
            ticket = await TicketDTOService.GetTicketByIdAsync(ticketId, userInfo!.CompanyId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task HandleArchive()
    {
        if (userInfo != null)
        {
            await TicketDTOService.ArchiveTicketAsync(ticketId, userInfo.CompanyId);
            ticket = await TicketDTOService.GetTicketByIdAsync(ticketId, userInfo.CompanyId);
        }
    }

    private async Task HandleRestore()
    {
        if (userInfo != null)
        {
            await TicketDTOService.RestoreTicketAsync(ticketId, userInfo.CompanyId);
            ticket = await TicketDTOService.GetTicketByIdAsync(ticketId, userInfo.CompanyId);
        }
    }
}
