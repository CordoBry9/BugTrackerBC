@page "/details-ticket/{ticketId:int}"
@using BugTrackerBC.Client.Components.UI
@using BugTrackerBC.Client.Components.UI.TicketsUI
@using BugTrackerBC.Client.Models
@using BugTrackerBC.Client.Services.Interfaces
@using Microsoft.AspNetCore.Authorization
@inject ITicketDTOService TicketDTOService
@inject IProjectDTOService ProjectDTOService
@inject ICompanyDTOService CompanyDTOService
@inject NavigationManager Nav
@rendermode InteractiveAuto
@attribute [Authorize]

@if (ticket != null && userInfo != null)
{
    <AuthorizeView>
        <Authorized>
            <div class="row g-4">
                <div class="col-lg-8 col-md-8">
                    <div class="card text-center mb-4">
                        <div class="card-header">
                            <h4>Ticket: @ticket.Title</h4>
                        </div>
                        <div class="card-body">
                            <p class="card-text">Created: @ticket.Created.ToString("g") <br /> Updated: @ticket.Updated?.ToString("g")</p>
                            <hr />
                            <p class="mt-3 card-text">Priority: @ticket.Priority</p>
                            <hr />
                            <p class="mt-3 card-text">Status: @ticket.Status</p>
                            <hr />
                            <p class="mt-3 card-text">Submitter: @ticket.SubmitterUser?.FullName</p>
                            <hr />
                            <p class="mt-3 card-text">Developer: @ticket.DeveloperUser?.FullName</p>
                            <hr />
                            <p class="mt-3 card-text">Project: @project?.Name</p>
                            <hr />
                            <div class="hstack justify-content-between">
                                <a href="/tickets" class="mt-3 btn btn-primary">Back to Tickets</a>

                                @* Authorization for editing a ticket *@
                                @if ((context.User.IsInRole(nameof(Roles.Admin)))
                               || (context.User.IsInRole(nameof(Roles.ProjectManager)) && project.Members.Any(m => m.Id == userInfo.UserId))
                               || (context.User.IsInRole(nameof(Roles.Developer)) && ticket.DeveloperUserId == userInfo.UserId)
                               || (context.User.IsInRole(nameof(Roles.Submitter)) && ticket.SubmitterUserId == userInfo.UserId))
                                {
                                    <a class="btn btn-secondary mt-3" href="/edit-Ticket/@ticketId"><i class="bi bi-pencil"></i> Edit</a>
                                }
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-md-4">
                    @* Authorization for assigning a ticket *@
                    @if ((context.User.IsInRole(nameof(Roles.Admin)) )
                   || (context.User.IsInRole(nameof(Roles.ProjectManager)) && project.Members.Any(m => m.Id == userInfo.UserId)))
                    {
                        <AssignTicketMembers assignDeveloper="AssignDev"
                                             companyMembers="companyMembers" projectManager="projectManager"
                                             projectManagers="projectManagers"
                                             projectMembers="projectMembers"
                                             Ticket="ticket"
                                             userInfo="userInfo" />
                    }
                </div>

                <div class="row mb-4">
                    <div class="col-12 mt-3 py-3">
                        @* Authorization for adding comments *@
                        @if ((context.User.IsInRole(nameof(Roles.Admin)))
                       || (context.User.IsInRole(nameof(Roles.ProjectManager)) && project.Members.Any(m => m.Id == userInfo.UserId))
                       || (context.User.IsInRole(nameof(Roles.Developer)) && (ticket.DeveloperUserId == userInfo.UserId || ticket.SubmitterUserId == userInfo.UserId))
                       || (context.User.IsInRole(nameof(Roles.Submitter)) && ticket.SubmitterUserId == userInfo.UserId))
                        {
                            <TicketCommentForm Comment="comment" CreateTheComment="HandleSubmit"></TicketCommentForm>
                        }
                    </div>
                    <div class="col-12">
                        <div class="">
                            <h4 class="">Comments:</h4>
                            <div class="card-body">
                                @if (comments != null)
                                {
                                    @foreach (TicketCommentDTO comment in comments.OrderByDescending(c => c.Created))
                                    {
                                        <TicketComments Comment="comment" userInfo="userInfo" DeleteTheComment="HandleDelete" UpdateTheComment="HandleUpdate"></TicketComments>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col border rounded p-3">
                        <h4 class="text-center">Attachments:</h4>
                        @* Authorization for adding attachments *@
                        @if ((context.User.IsInRole(nameof(Roles.Admin))) //add project companyId check to this / admin company id check
                       || (context.User.IsInRole(nameof(Roles.ProjectManager)) && project.Members.Any(m => m.Id == userInfo.UserId))
                       || (context.User.IsInRole(nameof(Roles.Developer)) && (ticket.DeveloperUserId == userInfo.UserId || ticket.SubmitterUserId == userInfo.UserId))
                       || (context.User.IsInRole(nameof(Roles.Submitter)) && ticket.SubmitterUserId == userInfo.UserId))
                        {
                            <TicketAttachments TicketId="ticketId" OnChange="HandleChange"></TicketAttachments>
                        }

                        <div class="btn-group dropdown mt-3">
                            <button type="button" class="btn btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                Show Attachments
                            </button>
                            <div class="dropdown-menu p-2" style="width: auto; min-width: 300px; max-width: 90vw; max-height: 400px; overflow-y: auto;">
                                <div class="row g-4">
                                    @foreach (TicketAttachmentDTO ticketAttachment in ticket.Attachments)
                                    {
                                        string? extension = Path.GetExtension(ticketAttachment.FileName)?.Trim('.') ?? "default";
                                        <div class="col-12">
                                            <div class="card h-100">
                                                <div class="card-header">
                                                    <div class="card-title fs-4 mb-0">@ticketAttachment.FileName</div>
                                                </div>
                                                <div class="card-body">
                                                    <p class="card-text"><b>Description:</b> @ticketAttachment.Description</p>
                                                    <p class="card-text"><b>Upload Date:</b> @ticketAttachment.Created.ToString("d")</p>
                                                    <div class="d-flex align-items-center justify-content-between">
                                                        <a href="@ticketAttachment.AttachmentUrl" target="_blank" class="btn btn-primary textwrap">
                                                            <img src="@($"png/{extension}.png")" alt="@extension" style="width: 30px; height: 30px;" />
                                                        </a>
                                                        @* Authorization for deleting attachments *@
                                                        @if ((context.User.IsInRole(nameof(Roles.Admin)))
                                                       || (context.User.IsInRole(nameof(Roles.ProjectManager)) && project.Members.Any(m => m.Id == userInfo.UserId))
                                                       || (ticketAttachment.UserId == userInfo.UserId))
                                                        {
                                                            <button class="btn btn-danger p-3" @onclick="() => DeleteAttachment(ticketAttachment.Id)">
                                                                <i class="bi bi-trash"></i>
                                                            </button>
                                                        }
                                                    </div>
                                                </div>
                                                @if (ticketAttachment.User is not null)
                                                {
                                                    <div class="card-footer">
                                                        <p class="card-text"><b>Uploaded by:</b> @ticketAttachment.User.FullName</p>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </Authorized>

        <NotAuthorized>
            <Message DisplayMessage="@authErrorMsg" Title="@authErrorTitle"></Message>
        </NotAuthorized>
    </AuthorizeView>
}

@code {
    [Parameter]
    public int ticketId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }

    private IEnumerable<ProjectDTO>? projects;
    private ProjectDTO? project;
    private TicketDTO? ticket;
    private UserInfo? userInfo;
    private TicketCommentDTO comment = new TicketCommentDTO();
    private IEnumerable<TicketCommentDTO>? comments;
    private IEnumerable<UserDTO> projectManagers = [];
    private IEnumerable<UserDTO> companyMembers = [];
    private IEnumerable<UserDTO> projectMembers = [];
    private UserDTO? projectManager = new();
    private string authErrorMsg = "User not authorized to access this page";
    private string authErrorTitle = "Authorization Error";
    private string authErrorCSS = "alert-primary";


    protected override async Task OnInitializedAsync()
    {
        userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
        comment = new TicketCommentDTO
            {
                UserId = userInfo?.UserId ?? string.Empty,
                TicketId = ticketId
            };
    }

    protected override async Task OnParametersSetAsync()
    {
        if (userInfo != null)
        {
            ticket = await TicketDTOService.GetTicketByIdAsync(ticketId, userInfo.CompanyId);
            if (ticket != null)
            {
                project = await ProjectDTOService.GetProjectByIdAsync(ticket.ProjectId, userInfo.CompanyId);
                comments = await TicketDTOService.GetTicketCommentsAsync(ticketId, userInfo.CompanyId);
                projectMembers = await ProjectDTOService.GetProjectMembersAsync(ticket.ProjectId, userInfo.CompanyId);

                if (project != null)
                {
                    projectManager = await ProjectDTOService.GetProjectManagerAsync(project.Id, userInfo.CompanyId);
                }
            }
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            await TicketDTOService.AddCommentAsync(comment, userInfo!.CompanyId);
            comments = await TicketDTOService.GetTicketCommentsAsync(ticketId, userInfo!.CompanyId);
            StateHasChanged();
            comment = new TicketCommentDTO
                {
                    UserId = userInfo?.UserId ?? string.Empty,
                    TicketId = ticketId
                };
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task HandleDelete(int commentId)
    {
        await TicketDTOService.DeleteCommentAsync(commentId, userInfo!.CompanyId);
        comments = await TicketDTOService.GetTicketCommentsAsync(ticketId, userInfo!.CompanyId);
    }

    private async Task AssignDev(TicketDTO ticketupdate)
    {
        if (ticketupdate != null && userInfo != null)
        {
            await TicketDTOService.UpdateTicketAsync(ticketupdate, userInfo.CompanyId, userInfo.UserId);
            ticket = await TicketDTOService.GetTicketByIdAsync(ticketId, userInfo.CompanyId);
            StateHasChanged();
        }
    }

    private async Task HandleUpdate(TicketCommentDTO comment)
    {
        try
        {
            await TicketDTOService.UpdateCommentAsync(comment, userInfo!.UserId);
            comments = await TicketDTOService.GetTicketCommentsAsync(ticketId, userInfo!.CompanyId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task HandleChange()
    {
        ticket = await TicketDTOService.GetTicketByIdAsync(ticketId, userInfo!.CompanyId);
    }

    private async Task DeleteAttachment(int attachmentId)
    {
        try
        {
            await TicketDTOService.DeleteTicketAttachment(attachmentId, userInfo!.CompanyId);
            ticket = await TicketDTOService.GetTicketByIdAsync(ticketId, userInfo!.CompanyId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }
}
