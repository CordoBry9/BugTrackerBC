@page "/my-tickets"
@using BugTrackerBC.Client.Components.UI.ProjectsUI
@using BugTrackerBC.Client.Components.UI.TicketsUI
@using BugTrackerBC.Client.Models
@using BugTrackerBC.Client.Services.Interfaces
@using Microsoft.AspNetCore.Authorization
@inject ITicketDTOService TicketDTOService
@inject IProjectDTOService ProjectDTOService
@inject NavigationManager Nav
@rendermode InteractiveAuto
@attribute [Authorize]

@if (userInfo != null)
{
    <AuthorizeView>
        <Authorized>
            <div class="d-flex align-items-center mb-4">
                <div class="col-6 p-3">
                    <h1 class="mb-0">Tickets</h1>
                </div>
                <div class="col-6 d-flex justify-content-end p-3">
                    <div>
                        @if (context.User.IsInRole(nameof(Roles.Admin))
                       || context.User.IsInRole(nameof(Roles.ProjectManager)) && projects.Any(p => p.Members.Any(m => m.Id == userInfo.UserId))
                       || context.User.IsInRole(nameof(Roles.Developer)) && projects.Any(p => p.Members.Any(m => m.Id == userInfo.UserId))
                       || context.User.IsInRole(nameof(Roles.Submitter)) && projects.Any(p => p.Members.Any(m => m.Id == userInfo.UserId)))
                        {
                            <button class="btn btn-primary me-2 mb-sm-2" type="button" data-bs-toggle="collapse" data-bs-target="#ticketForm" aria-controls="ticketForm">
                                Create a Ticket
                            </button>
                        }
                        <button class="btn btn-primary mb-sm-2" @onclick="ToggleArchivedView">
                            @(archivedView == false ? "Archived Tickets" : "Active Tickets")
                        </button>
                    </div>
                </div>
            </div>
            <div class="collapse mb-4" id="ticketForm">
                <div class="card card-body">
                    <TicketForm newTicket="newTicket" projects="projects" userInfo="userInfo" OnSubmit="HandleSubmit" />
                </div>
            </div>

            <div class="row">
                <div class="col-3">
                    <TicketsPriorityWidget OnPrioritySelected="FilterTicketsByPriority" />
                    <TicketsInfoView OnAssignmentSelected="FilterTicketsByAssignment" />
                </div>
                <div class="col-9">
                    <div class="">
                        @if (archivedView == false)
                        {
                            @if (tickets == null)
                            {
                                <p><em>Loading...</em></p>
                            }
                            else
                            {
                                <div class="table-responsive border rounded shadow-sm">
                                    <table class="table table-striped align-middle">
                                        <thead class="text-center">
                                            <tr>
                                                <th>Created</th>
                                                <th>Title</th>
                                                <th>Priority</th>
                                                <th>Status</th>
                                                <th>Type</th>
                                                <th>Archive</th>
                                            </tr>
                                        </thead>
                                        <tbody class="text-center align-items-center">
                                            @foreach (TicketDTO ticket in tickets.Where(t => !t.Archived && (selectedPriority == null || t.Priority == selectedPriority) && (selectedAssignment == null || (selectedAssignment == true && t.DeveloperUserId != null) || (selectedAssignment == false && t.DeveloperUserId == null))).OrderByDescending(t => t.Created))
                                            {
                                                <TicketTableRows Ticket="@ticket" OnArchive="HandleArchive" OnRestore="HandleRestore" Projects="projects" userInfo="userInfo"></TicketTableRows>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                        }
                        else
                        {
                            @if (projects == null)
                            {
                                <p><em>Loading...</em></p>
                            }
                            else
                            {
                                <div class="table-responsive border rounded shadow-sm">
                                    <table class="table table-striped align-middle">
                                        <thead class="text-center">
                                            <tr>
                                                <th>Created</th>
                                                <th>Title</th>
                                                <th>Priority</th>
                                                <th>Status</th>
                                                <th>Type</th>
                                                <th>Restore</th>
                                            </tr>
                                        </thead>
                                        <tbody class="text-center align-items-center">
                                            @foreach (TicketDTO ticket in archivedTickets.Where(t => t.Archived && (selectedPriority == null || t.Priority == selectedPriority) && (selectedAssignment == null || (selectedAssignment == true && t.DeveloperUserId != null) || (selectedAssignment == false && t.DeveloperUserId == null))).OrderByDescending(t => t.Created))
                                            {
                                                <TicketTableRows Ticket="@ticket" OnArchive="HandleArchive" OnRestore="HandleRestore" Projects="projects" userInfo="userInfo"></TicketTableRows>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </Authorized>
        <NotAuthorized>
            <h1>Access Denied</h1>
            <p>You are not authorized to view this page. Please log in to continue.</p>
        </NotAuthorized>
    </AuthorizeView>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }

    [Parameter]
    public TicketDTO? Ticket { get; set; }

    [Parameter]
    public ProjectDTO? Project { get; set; }

    private List<TicketDTO> tickets = new List<TicketDTO>();
    private UserInfo? userInfo;
    private TicketDTO? newTicket = new TicketDTO();
    private bool archivedView;
    private List<TicketDTO> archivedTickets = new List<TicketDTO>();
    private List<ProjectDTO> projects = new List<ProjectDTO>();
    private List<ProjectDTO> archivedProjects = new List<ProjectDTO>();
    private TicketPriority? selectedPriority = null; // Keep track of selected priority
    private bool? selectedAssignment = null; // Keep track of selected assignment

    protected override async Task OnInitializedAsync()
    {
        userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

        newTicket!.SubmitterUserId = userInfo!.UserId;
        projects = (await ProjectDTOService.GetMemberProjectsAsync(userInfo!.CompanyId, userInfo.UserId)).ToList();
        archivedProjects = (await ProjectDTOService.GetMemberArchivedProjectsAsync(userInfo!.CompanyId, userInfo.UserId)).ToList();
        tickets = (await TicketDTOService.GetMemberTicketsAsync(userInfo!.CompanyId, userInfo!.UserId)).ToList();
        archivedTickets = (await TicketDTOService.GetMemberArchivedTicketsAsync(userInfo!.CompanyId, userInfo!.UserId)).ToList();
    }

    private async Task HandleSubmit()
    {
        try
        {
            newTicket!.SubmitterUserId = userInfo!.UserId;
            await TicketDTOService.AddTicketAsync(newTicket!, userInfo!.CompanyId);
            await ReloadTickets();
            newTicket = new TicketDTO
                {
                    SubmitterUserId = userInfo.UserId,
                };
            // Reset the form
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task HandleRestore(int ticketId)
    {
        try
        {
            await TicketDTOService.RestoreTicketAsync(ticketId, userInfo!.CompanyId);
            await ReloadTickets();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task HandleArchive(int ticketId)
    {
        try
        {
            await TicketDTOService.ArchiveTicketAsync(ticketId, userInfo!.CompanyId);
            await ReloadTickets();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task ReloadTickets()
    {
        tickets = (await TicketDTOService.GetMemberTicketsAsync(userInfo!.CompanyId, userInfo!.UserId)).ToList();
        archivedTickets = (await TicketDTOService.GetMemberArchivedTicketsAsync(userInfo!.CompanyId, userInfo!.UserId)).ToList();
    }

    private void ToggleArchivedView()
    {
        archivedView = !archivedView;
    }

    private void FilterTicketsByPriority(TicketPriority? priority)
    {
        selectedPriority = priority;
    }

    private void FilterTicketsByAssignment(bool? isAssigned)
    {
        selectedAssignment = isAssigned;
    }
}
