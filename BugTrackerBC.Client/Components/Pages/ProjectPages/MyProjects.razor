@page "/my-projects"
@using BugTrackerBC.Client.Components.UI.ProjectsUI
@using BugTrackerBC.Client.Models
@using BugTrackerBC.Client.Services.Interfaces
@using Microsoft.AspNetCore.Authorization
@inject IProjectDTOService ProjectDTOService
@inject NavigationManager Nav
@rendermode InteractiveServer
@attribute [Authorize]

@if (userInfo == null)
{
    <h1>Please Log In</h1>
}
@if (archivedView == false)
{
    <AuthorizeView Roles="ProjectManager, Submitter, Developer">
        <Authorized>
            <div class="row d-flex text-center justify-content-center">
                <h1 class="text-center col-12">Projects</h1>
                <div class="col-6 text-center">
                    <button class="btn btn-primary mt-2" type="button" data-bs-toggle="collapse" data-bs-target="#ticketForm" aria-expanded="false" aria-controls="projectForm">
                        Create a Ticket
                    </button>
                    <div class="collapse mt-3 justify-content-center" id="ticketForm">
                        <div class="card card-body mx-auto" style="width: 50%;">
                            <ProjectForm newProject="newProject" userInfo="userInfo" OnSubmit="HandleSubmit" />
                        </div>
                    </div>
                </div>
                <div class="text-center col-6">
                    <button class="btn btn-primary mt-2" @onclick="ToggleArchivedView">
                        Archived View
                    </button>
                </div>
            </div>

            <div class="mt-3">
                @if (projects == null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    <table class="table table-striped table-bordered mt-3">
                        <thead>
                            <tr>
                                <th>Created</th>
                                <th>Name</th>
                                <th>Description</th>
                                <th>Priority</th>
                                <th>Status</th>
                                <th>Start Date</th>
                                <th>End Date</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (ProjectDTO project in archivedProjects.OrderByDescending(p => p.Created))
                            {
                                <ProjectTableRows Project="project" OnArchive="HandleArchive" OnRestore="HandleRestore" />
                            }
                        </tbody>
                    </table>
                }
            </div>
        </Authorized>
        <NotAuthorized>
            <h1>Access Denied</h1>
            <p>You are not authorized to view this page. Please log in to continue.</p>
        </NotAuthorized>
    </AuthorizeView>
}
else
{
    <AuthorizeView>
        <Authorized>
            <div class="row d-flex text-center justify-content-center">
                <h1 class="text-center col-12">Projects</h1>
                <div class="text-center col-6">
                    <button class="btn btn-primary mt-2" @onclick="ToggleArchivedView">
                        Active Projects
                    </button>
                </div>
            </div>

            <div class="mt-3">
                @if (archivedProjects == null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    <ArchivedProjects archivedProjects="archivedProjects" OnRestore="HandleRestore" />
                }
            </div>
        </Authorized>
        <NotAuthorized>
            <h1>Access Denied</h1>
            <p>You are not authorized to view this page. Please log in to continue.</p>
        </NotAuthorized>
    </AuthorizeView>
}

@code {
    #region states
    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }

    [Parameter]
    public ProjectDTO? Project { get; set; }

    #endregion

    #region fields
    private List<ProjectDTO> projects = new List<ProjectDTO>();
    private ProjectDTO? newProject = new ProjectDTO
        {
            StartDate = DateTime.Today,
            EndDate = DateTime.Today.AddDays(7)
        };

    private UserInfo? userInfo;
    private bool archivedView;
    private List<ProjectDTO> archivedProjects = new List<ProjectDTO>();
    #endregion

    protected override async Task OnInitializedAsync()
    {

        userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
        if (userInfo is not null)
        {
            projects = (await ProjectDTOService.GetMemberProjectsAsync(userInfo.CompanyId, userInfo.UserId)).ToList();
            archivedProjects = (await ProjectDTOService.GetMemberArchivedProjectsAsync(userInfo!.CompanyId, userInfo.UserId)).ToList();
        }
        else
        {
            Console.WriteLine("User is not logged in");
        }

    }

    private async Task HandleSubmit()
    {
        try
        {
            await ProjectDTOService.AddProjectAsync(newProject!, userInfo!.CompanyId);
            projects = (await ProjectDTOService.GetMemberProjectsAsync(userInfo.CompanyId, userInfo.UserId)).ToList();
            newProject = new ProjectDTO()
                {
                    StartDate = DateTime.Today,
                    EndDate = DateTime.Today.AddDays(7)
                }; // Reset the form
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task HandleRestore(int projectId)
    {
        try
        {
            if (userInfo is not null)
            {
                await ProjectDTOService.RestoreProjectAsync(projectId, userInfo.CompanyId);
                projects = (await ProjectDTOService.GetMemberProjectsAsync(userInfo.CompanyId, userInfo.UserId)).ToList();
                archivedProjects = (await ProjectDTOService.GetMemberArchivedProjectsAsync(userInfo!.CompanyId, userInfo.UserId)).ToList();

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task HandleArchive(int projectId)
    {
        try
        {
            await ProjectDTOService.ArchiveProjectAsync(projectId, userInfo!.CompanyId);
            projects = (await ProjectDTOService.GetMemberProjectsAsync(userInfo.CompanyId, userInfo.UserId)).ToList();
            archivedProjects = (await ProjectDTOService.GetMemberArchivedProjectsAsync(userInfo!.CompanyId, userInfo.UserId)).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private void ToggleArchivedView()
    {
        archivedView = !archivedView;
    }
}
